name: main Branch CI

on:
  push:
    branches:
      - 'main'

jobs:
  Publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [ VersionRelease ]
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to cmment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip' # caching pip dependencies
      - name: Install python packages
        run: |
          pip install twine
          pip install wheel
      - name: Update version in __init__.py
        run: |
          VERSION=$(git tag --list | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1 | sed 's/^v//')
          echo "__version__ = '$VERSION'" > "__init__.py"
      - name: Copy resources folder to package
        run: |
          mkdir ExtendedDiagramIcons/resources/
          cp -r resources/* ./ExtendedDiagramIcons/resources/*
      - name: Publish
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/* -u __token__ -p "${{ secrets.PYPI_API_TOKEN }}"
  VersionRelease:
    name: Version Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to cmment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check for valid git tags and commit message
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          if [[ ! "$COMMIT_MESSAGE" =~ ^(fix|feat): ]]; then
            echo "Error: Commit message does not follow semantic release prefix rules."
            exit 1
          fi
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
      - name: Install dependencies
        run: npm install -g semantic-release
      - name: Create Next Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Perform semantic release (SemVer)
          npx semantic-release
      - name: Output version
        run: git tag --list | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1 | sed 's/^v//'